# Question 3
data = read.table(file.choose())
head(data)
# Gender v. Survival
study2 = data.frame(Gender=data$V1,Survival=data$V3)
contingency2 = table(study2)
contingency2
results = chisq.test(contingency2)
results
RStudio.Version()
citation()
citation('vegan')
version
citation()
citation(base)
citation(package = base)
citation(package = 'base')
iris = data("iris")
iris
iris = data("iris")
head(iris)
iris = data(iris)
head(iris)
library(datasets)
iris = data(iris)
head(iris)
data(iris)
head(iris)
install.packages('janitor')
library(janitor)
names(iris)
names(clean_names(iris))
names(clean_names(iris, 'screaming_snake'))
citation()
?iNEXT
install.packages('"iNEXT"')
test = read_csv('GSTV_PartialWarpScores_AllometryIncluded.csv')
install.packages('pupR')
library(devtools)
install_github('dsjohnson/pupR')
library(pupR)
pupR()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(installr)
updateR()
updateR()
updateR()
updateR(keep_old_packages = TRUE, keep_install_file = TRUE)
## load required packages
library(tidyverse)
library(ggthemes)
library(skimr)
## set plotting theme
theme_set(theme_few())
install.packages('ggthemes')
install.packages('skimr')
library(tidyverse)
library(ggthemes)
library(skimr)
## set plotting theme
theme_set(theme_few())
## import data on US federal research and development spending through time
fed_rd <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-12/fed_r_d_spending.csv")
fed_rd
## summarize data
skim(fed_rd)
## plot total government outlays (expenditures) through time
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = year, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot total government outlays (expenditures) through time
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = year, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot total outlays against GDP (these two should be tightly correlated)
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = gdp, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot departmental RD budgets against GDP
ggplot(data = fed_rd %>% filter(rd_budget > 0),
mapping = aes(x = gdp / 1000000000, ## GDP in billions USD
y = rd_budget / 1000000, ## budget in millions USD
colour = year)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ department, scales = "free") +
labs(x = "Gross Domestic Product (billions USD)",
y = "R&D Budget (millions USD)")
fed_rd <- fed_rd %>%
mutate(gdp_bill = gdp / 1000000000,
rd_mill = rd_budget / 1000000) %>%
filter(rd_budget > 0)
fed_rd %>%
group_by(department)
fed_rd %>%
group_by(department) %>%
nest()
## group tibble by department
by_dept <- fed_rd %>%
group_by(department) %>%
nest()
by_dept
by_dept$data[1]
by_dept$data[2]
by_dept
by_dept$data[[1]] ## data for Department of Defense
by_dept
## define a function to fit the models
rd_model <- function(df) {
lm(rd_mill ~ gdp_bill, data = df)
}
## fit a model for each department and add the output to the dataframe
by_dept <- by_dept %>%
mutate(mod = map(data, rd_model))
by_dept
data
## fit a model for each department and add the output to the dataframe
by_dept <- by_dept %>%
mutate(mod = map(data, rd_model))
by_dept
rd_model(data)
rd_model(by_dept)
by_dept
rd_model(by_dept[[1]])
rd_model(by_dept[1])
by_dept <- by_dept %>%
mutate(tidy = map(mod, broom::tidy),
glance = map(mod, broom::glance),
augment = map(mod, broom::augment),
rsq = glance %>% map_dbl("adj.r.squared"),
pval = glance %>% map_dbl("p.value"))
by_dept
by_dept$tidy
by_dept$tidy[[1]]
by_dept$glance[[1]]
by_dept$augment[[1]]
## plot the r-squared values for each country
ggplot(data = by_dept %>%
mutate(p_bin = as.factor(if_else(pval > 0.05, "ns", "sig"))),
mapping = aes(x = reorder(department, rsq),
y = rsq, colour = p_bin)) +
geom_point(size = 3) +
scale_colour_manual(values = c("red", "blue"), name = NULL,
labels = c("non-significant", "significant")) +
labs(x = "US federal department",
y = bquote('Model ' * R[adj]^2),
title = "Does GDP predict R&D spending?") +
theme(legend.position = c(0.2, 0.75),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
unnest(by_dept, data) ## back to where we started
## view model summaries by department
unnest(by_dept, glance, .drop = TRUE)
## view model estimates by department
unnest(by_dept, tidy, .drop = TRUE)
## unnest the augmented data
## one row per observation per model (fitted values, residuals, etc)
unnest(by_dept, augment)
## plot model residuals
by_dept %>%
unnest(augment) %>%
ggplot(data = .,
mapping = aes(x = gdp_bill, y = .resid)) +
geom_line(mapping = aes(colour = department)) +
geom_smooth(method = "loess", se = FALSE, colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "residuals")
## view model summaries by department
unnest(by_dept, glance, .drop = TRUE)
## view model estimates by department
unnest(by_dept, tidy, .drop = TRUE)
## plot model residuals
by_dept %>%
unnest(augment) %>%
ggplot(data = .,
mapping = aes(x = gdp_bill, y = .resid)) +
geom_line(mapping = aes(colour = department)) +
geom_smooth(method = "loess", se = FALSE, colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "residuals")
## plot fitted values (for R&D spending) against GDP
by_dept %>%
unnest(augment) %>%
ggplot(data = ., mapping = aes(x = gdp_bill)) +
geom_point(mapping = aes(y = rd_mill, colour = department)) +
geom_line(mapping = aes(y = .fitted, colour = department)) +
geom_smooth(mapping = aes(y = rd_mill),
method = "loess", colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "R&D spending (fitted)")
load("~/PhD/SNP Demographic modelling/Outliers_directory/.RData")
View(`%!in%`)
View(BayeScan_out)
load("~/PhD/SNP Demographic modelling/Outliers_directory/.RData")
View(fed_rd)
install.packages("swirl")
library(swirl)
install.packages("Swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl",
dependencies = T)
library(swirl)
install.packages("rlang")
library(swirl)
ls()
setwd('~/PhD/GitHub/TidyTuesday/Hockey_goals')
library(patchwork)
library(janitor)
library(devtools)
library(skimr)
library(rsed)
library(data.table)
library(sjPlot)
library(tidyverse)
theme_set(theme_bw())
## Read in data
# game_goals = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-03/game_goals.csv')
# top_250 = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-03/top_250.csv')
season_goals = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-03/season_goals.csv')
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
labs(x = 'year season started',
y = 'penalty minutes')
arrange(season_goals$penalty_min) %>%
View()
season_goals %>%
arrange(penalty_min) %>%
select(penalty_min) %>%
View()
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
labs(x = 'year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(palette = 'PuBuGn')
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(palette = 'PuBuGn')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(palette = 'PuBuGn')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(type = 'seq',
palette = 'PuBuGn')+
scale_color_continuous(values = )
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(type = 'gradient',
palette = 'PuBuGn')+
scale_color_continuous(values = )
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(type = 'gradient',
palette = 'PuBuGn')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
geom_hex() +
scale_color_brewer(type = 'seq',
palette = 'PuBuGn')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
library(wesanderson)
names(wes_palettes)
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
scale_color_manual(values = wes_palette('Darjeeling1',
type = 'continuous'))+
geom_hex()+  labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
scale_color_manual(values = wes_palette('Darjeeling1',
type = 'continuous'))+
geom_hex(aes(col = penalty_min))+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min,
color = count)) +
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex()+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min,
color = count(penalty_min))) +
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex()+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
count = summarise(season_goals,
count(penalty_min))
count = summarise(count(penalty_min))
count = summarise(count(season_goals$penalty_min))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
scale_color_gradient(low = '#59B389',
high = '#FFADA1')+
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex()+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex()+
scale_color_gradient(low = '#59B389',
high = '#FFADA1')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
season_goals
season_goals %>%
select(player,
rank,
penalty_min,
yr_start,
total_goals)
count(season_goals,
penalty_min)
count = count(season_goals,
penalty_min)
ggplot(data = season_goals,
aes(x = yr_start,
y = penalty_min)) +
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex(data = count,
aes(col = penalty_min))+
scale_color_gradient(low = '#59B389',
high = '#FFADA1')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
short_data = season_goals %>%
select(player,
rank,
penalty_min,
yr_start,
total_goals)
ggplot(data = short_data,
aes(x = yr_start,
y = penalty_min)) +
# scale_color_manual(values = wes_palette('Darjeeling1',
#                                         type = 'continuous'))+
geom_hex(data = count,
aes(col = penalty_min))+
scale_color_gradient(low = '#59B389',
high = '#FFADA1')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = short_data,
aes(x = yr_start,
y = penalty_min))
short_data
ggplot(data = short_data,
aes(x = yr_start,
y = penalty_min)) +
geom_hex()+
scale_color_gradient(low = '#59B389',
high = '#FFADA1',
trans = 10)+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))
ggplot(data = short_data,
aes(x = yr_start,
y = penalty_min)) +
geom_hex()+
scale_fill_gradient(low = '#59B389',
high = '#FFADA1')+
labs(x = 'Year season started',
y = 'Penalty minutes') +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 15),
axis.text = element_text(size = 15))

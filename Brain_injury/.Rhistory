?iNEXT
install.packages('"iNEXT"')
test = read_csv('GSTV_PartialWarpScores_AllometryIncluded.csv')
install.packages('pupR')
library(devtools)
install_github('dsjohnson/pupR')
library(pupR)
pupR()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(installr)
updateR()
updateR()
updateR()
updateR(keep_old_packages = TRUE, keep_install_file = TRUE)
## load required packages
library(tidyverse)
library(ggthemes)
library(skimr)
## set plotting theme
theme_set(theme_few())
install.packages('ggthemes')
install.packages('skimr')
library(tidyverse)
library(ggthemes)
library(skimr)
## set plotting theme
theme_set(theme_few())
## import data on US federal research and development spending through time
fed_rd <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-02-12/fed_r_d_spending.csv")
fed_rd
## summarize data
skim(fed_rd)
## plot total government outlays (expenditures) through time
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = year, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot total government outlays (expenditures) through time
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = year, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot total outlays against GDP (these two should be tightly correlated)
ggplot(data = fed_rd %>% filter(department == "DOD"),
mapping = aes(x = gdp, total_outlays)) +
geom_point() +
geom_smooth(method = "loess")
## plot departmental RD budgets against GDP
ggplot(data = fed_rd %>% filter(rd_budget > 0),
mapping = aes(x = gdp / 1000000000, ## GDP in billions USD
y = rd_budget / 1000000, ## budget in millions USD
colour = year)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~ department, scales = "free") +
labs(x = "Gross Domestic Product (billions USD)",
y = "R&D Budget (millions USD)")
fed_rd <- fed_rd %>%
mutate(gdp_bill = gdp / 1000000000,
rd_mill = rd_budget / 1000000) %>%
filter(rd_budget > 0)
fed_rd %>%
group_by(department)
fed_rd %>%
group_by(department) %>%
nest()
## group tibble by department
by_dept <- fed_rd %>%
group_by(department) %>%
nest()
by_dept
by_dept$data[1]
by_dept$data[2]
by_dept
by_dept$data[[1]] ## data for Department of Defense
by_dept
## define a function to fit the models
rd_model <- function(df) {
lm(rd_mill ~ gdp_bill, data = df)
}
## fit a model for each department and add the output to the dataframe
by_dept <- by_dept %>%
mutate(mod = map(data, rd_model))
by_dept
data
## fit a model for each department and add the output to the dataframe
by_dept <- by_dept %>%
mutate(mod = map(data, rd_model))
by_dept
rd_model(data)
rd_model(by_dept)
by_dept
rd_model(by_dept[[1]])
rd_model(by_dept[1])
by_dept <- by_dept %>%
mutate(tidy = map(mod, broom::tidy),
glance = map(mod, broom::glance),
augment = map(mod, broom::augment),
rsq = glance %>% map_dbl("adj.r.squared"),
pval = glance %>% map_dbl("p.value"))
by_dept
by_dept$tidy
by_dept$tidy[[1]]
by_dept$glance[[1]]
by_dept$augment[[1]]
## plot the r-squared values for each country
ggplot(data = by_dept %>%
mutate(p_bin = as.factor(if_else(pval > 0.05, "ns", "sig"))),
mapping = aes(x = reorder(department, rsq),
y = rsq, colour = p_bin)) +
geom_point(size = 3) +
scale_colour_manual(values = c("red", "blue"), name = NULL,
labels = c("non-significant", "significant")) +
labs(x = "US federal department",
y = bquote('Model ' * R[adj]^2),
title = "Does GDP predict R&D spending?") +
theme(legend.position = c(0.2, 0.75),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
unnest(by_dept, data) ## back to where we started
## view model summaries by department
unnest(by_dept, glance, .drop = TRUE)
## view model estimates by department
unnest(by_dept, tidy, .drop = TRUE)
## unnest the augmented data
## one row per observation per model (fitted values, residuals, etc)
unnest(by_dept, augment)
## plot model residuals
by_dept %>%
unnest(augment) %>%
ggplot(data = .,
mapping = aes(x = gdp_bill, y = .resid)) +
geom_line(mapping = aes(colour = department)) +
geom_smooth(method = "loess", se = FALSE, colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "residuals")
## view model summaries by department
unnest(by_dept, glance, .drop = TRUE)
## view model estimates by department
unnest(by_dept, tidy, .drop = TRUE)
## plot model residuals
by_dept %>%
unnest(augment) %>%
ggplot(data = .,
mapping = aes(x = gdp_bill, y = .resid)) +
geom_line(mapping = aes(colour = department)) +
geom_smooth(method = "loess", se = FALSE, colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "residuals")
## plot fitted values (for R&D spending) against GDP
by_dept %>%
unnest(augment) %>%
ggplot(data = ., mapping = aes(x = gdp_bill)) +
geom_point(mapping = aes(y = rd_mill, colour = department)) +
geom_line(mapping = aes(y = .fitted, colour = department)) +
geom_smooth(mapping = aes(y = rd_mill),
method = "loess", colour = "black") +
geom_hline(yintercept = 0, colour = "red") +
labs(x = "Gross Domestic Product (billions USD)",
y = "R&D spending (fitted)")
load("~/PhD/SNP Demographic modelling/Outliers_directory/.RData")
View(`%!in%`)
View(BayeScan_out)
load("~/PhD/SNP Demographic modelling/Outliers_directory/.RData")
View(fed_rd)
install.packages("swirl")
library(swirl)
install.packages("Swirl")
install.packages("swirl")
library(swirl)
install.packages("swirl",
dependencies = T)
library(swirl)
install.packages("rlang")
library(swirl)
ls()
library(devtools)
install_github('tavareshugo/windowscanr')
library(windowscanr)
vignette('windowscanr_intro')
setwd('~/PhD/GitHub/TidyTuesday/SFTrees/')
library(patchwork)
library(janitor)
library(tidyverse)
data = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
clean = data %>%
select(-dbh, -plot_size) %>%
na.omit
clean
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = '::')
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = '::') %>%
select(-latin)
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = '::') %>%
select(-latin,
common)
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = '::') %>%
select(-latin) %>%
select(common)
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = "::") %>%
select(-latin) %>%
select(common)
clean %>%
separate(col = species,
into = c('latin', 'common'),
sep = "::") %>%
select(-latin) %>%
select(common) %>%
str_detect()
clean
clean %>%
select(legal_status)
clean %>%
select(legal_status) %>%
View()
clean %>%
select(site_info, caretaker) %>%
View()
library(devtools)
install_github("thebioengineer/tidytuesdayR")
library(tidytuesdayR)
full_data = tt_load('2020-01-28')
full_data
clean
clean %>%
select(date) %>%
View()
clean %>%
select(date)
date = clean %>%
select(date) %>%
separate(date,
into = c('year',
'month',
'day'),
sep = "-")
clean %>%
select(date) %>%
separate(date,
into = c('year',
'month',
'day'),
sep = "-")
clean = data %>%
select(-dbh, -plot_size) %>%
na.omit() %>%
# select(date) %>%
separate(date,
into = c('year',
'month',
'day'),
sep = "-")
clean
clean = data %>%
select(-dbh, -plot_size) %>%
na.omit() %>%
# select(date) %>%
separate(date,
into = c('year',
'month',
'day'),
sep = "-") %>%
group_by(year) %>%
arrange(year)
clean
map_sf = map_data('state')
map_sf
map_sf = map_data('state',
region = 'san francisco')
map_sf = map_data('state',
region = 'california')
map_sf
tail(map_sf)
map_sf = map_data('state',
region == 'california')
map_sf = map_data('state',
region = 'california')
map_sf
install.packages('ggmap')
library(ggmap)
##############################
## Brain injury graphics tidy tues
##
## Matt Brachmann (PhDMattyB)
##
## 2020-03-26
##
##############################
dir.create('~/PhD/GitHub/TidyTuesday/Brain_injury')
setwd('~/PhD/GitHub/TidyTuesday/Brain_injury/')
library(tidytuesdayR)
library(tidyverse)
# data --------------------------------------------------------------------
data = tt_load(2020, week = 13)
# data --------------------------------------------------------------------
age = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-24/tbi_age.csv')
year = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-24/tbi_year.csv')
military = read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-24/tbi_military.csv')
age
year
military
test = left_join(age, year by = 'injury_mechanism')
test = left_join(age, year, by = 'injury_mechanism')
test
test = left_join(age, year, by = c('injury_mechanism',
'type'))
test
View(test)
test = left_join(age,
year,
by = c('injury_mechanism',
'type',
'number_est',
'rate_est'))
test
View(test)
age_year = test %>%
group_by(age_group,
injust_mechanism)
age_year = test %>%
group_by(age_group,
injury_mechanism)
test %>%
select(type) %>%
View()
age_year = test %>%
group_by(age_group,
type,
injury_mechanism)
age_year
age_year = test %>%
group_by(age_group,
injury_mechanism)
age_year
test = left_join(age,
year,
by = c('injury_mechanism',
'type'
'rate_est'))
test = left_join(age,
year,
by = c('injury_mechanism',
'type',
'rate_est'))
age_year = test %>%
group_by(age_group,
injury_mechanism)
age_year
test = left_join(age,
year,
by = c('injury_mechanism',
'type',
'number_est',
'rate_est'))
age_year = test %>%
group_by(age_group,
injury_mechanism)
age_year
age_year = test %>%
group_by(age_group,
type)
age_year
age_year = test %>%
group_by(age_group,
type) %>%
ggplot(x = injury_mechanism,
y = rate_est)
age_year = test %>%
group_by(age_group,
type) %>%
ggplot(x = injury_mechanism,
y = rate_est)+
geom_violin()
age_year = test %>%
# group_by(age_group,
#          type) %>%
ggplot(x = injury_mechanism,
y = rate_est)+
geom_violin()
age_year = test %>%
# group_by(age_group,
#          type) %>%
ggplot(x = injury_mechanism,
y = rate_est)+
geom_violin(aes(col = age_group))
test %>%
# group_by(age_group,
#          type) %>%
ggplot(x = injury_mechanism,
y = rate_est)+
geom_violin(aes(col = age_group))
test %>%
# group_by(age_group,
#          type) %>%
ggplot(aes(x = injury_mechanism,
y = rate_est))+
geom_violin(aes(col = age_group))
test %>%
# group_by(age_group,
#          type) %>%
ggplot(aes(x = injury_mechanism,
y = rate_est))+
geom_bar(aes(col = age_group,
fill = age_group))
test %>%
# group_by(age_group,
#          type) %>%
ggplot(aes(x = injury_mechanism,
y = rate_est))+
geom_boxplot()
test
test %>%
# group_by(age_group,
#          type) %>%
ggplot(aes(x = age_group,
y = rate_est))+
geom_violin(aes(col = injury_mechanism,
fill = injury_mechanism))
test %>%
# group_by(age_group,
#          type) %>%
ggplot(aes(x = age_group,
y = rate_est))+
geom_bar()
age
test
year
age
military
year
age %>%
group_by(year) %>%
ggplot(x = year,
y = rate_est)+
geom_violin(aes(col = type,
fill = type))
age %>%
group_by(year) %>%
ggplot(aes(x = year,
y = rate_est))+
geom_violin(aes(col = type,
fill = type))
age %>%
ggplot(aes(x = year,
y = rate_est))+
# geom_violin(aes(col = type,
#                 fill = type))
geom_point(aes(group = year))
age %>%
ggplot(aes(x = year,
y = rate_est))+
# geom_violin(aes(col = type,
#                 fill = type))
geom_point()
age
year
year
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visit',
'Hospitalizations',
'Deaths'))
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visit',
'Hospitalizations',
'Deaths'))) %>%
group_by(type)
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visit',
'Hospitalizations',
'Deaths')))
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visits', type),
type = factor(type, levels = c('ER visits',
'Hospitalizations',
'Deaths'))) %>%
group_by(type)
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visits', type),
type = factor(type, levels = c('ER visits',
'Hospitalizations',
'Deaths')))
year %>%
mutate(type = ifelse(str_detect(type, 'Emer'),
'ER visits', type),
type = factor(type, levels = c('ER visits',
'Hospitalizations',
'Deaths'))) %>%
group_by(type)
